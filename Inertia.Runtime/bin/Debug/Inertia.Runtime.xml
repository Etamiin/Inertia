<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inertia.Runtime</name>
    </assembly>
    <members>
        <member name="T:Inertia.Runtime.ScriptArgumentsCollection">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.IsDisposed">
            <summary>
            Returns true if the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Count">
            <summary>
            Returns the number of arguments in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Position">
            <summary>
            Returns the next argument position in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Item(System.Int32)">
            <summary>
            Returns the argument as object at the specified index in the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.GetArgumentAt``1(System.Int32)">
            <summary>
            Returns the argument as <typeparamref name="T"/> at the specified index in the collection.
            </summary>
            <typeparam name="T">Specified <see cref="T:System.Type"/> to cast</typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.GetNextArgument``1">
            <summary>
            Returns the next argument based on <see cref="P:Inertia.Runtime.ScriptArgumentsCollection.Position"/> field casted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/> of the argument</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="T:Inertia.Runtime.ScriptInTime">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptInTime.Permanent">
            <summary>
            Returns true if the current instance run permanently.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.ScriptInTime.#ctor(System.Single,BasicAction{Inertia.Runtime.ScriptInTime},System.Boolean)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Runtime.ScriptInTime"/>
            </summary>
            <param name="time">Time between each execution</param>
            <param name="action">Action to execute</param>
            <param name="permanent">True if it will run permanently</param>
        </member>
        <member name="T:Inertia.Runtime.Script">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.DeltaTime">
            <summary>
            Returns the time elapsed since the last execution frame. 
            </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.Time">
            <summary>
            Returns the time elapsed since the Runtime loop was launched.
            </summary>
        </member>
        <member name="F:Inertia.Runtime.Script.MaxExecutionPerSecond">
            <summary>
            Set or Get the maximum number of executions per second (max: <see cref="F:Inertia.Runtime.Script.FixedMaxExecutionPerSecond"/>).
            </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.IsDestroyed">
            <summary>
            Returns true is the current instance is destroyed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnAwake(Inertia.Runtime.ScriptArgumentsCollection)">
            <summary>
            Occurs when the script initializes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Inertia.Runtime.Script.OnUpdate">
            <summary>
            Occurs each execution frame.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnDestroy">
            <summary>
            Occurs before the script is destroyed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Inertia.Runtime.ScriptCollection">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptCollection.Count">
            <summary>
            Returns the number of <see cref="T:Inertia.Runtime.Script"/> running in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptCollection.IsDisposed">
            <summary>
            Returns true if the currnet instance is disposed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.Runtime.ScriptCollection"/>
            </summary>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Add``1(System.Object[])">
            <summary>
            Create a new instance of <typeparamref name="T"/> with the specified arguments.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the target <see cref="T:Inertia.Runtime.Script"/></typeparam>
            <param name="args"></param>
            <returns>Returns the created instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Remove``1">
            <summary>
            Remove the first occurence of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of <see cref="T:Inertia.Runtime.Script"/> to remove</typeparam>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.RemoveAll``1">
            <summary>
            Remove all <see cref="T:Inertia.Runtime.Script"/> of type <typeparamref name="T"/> running in the collection.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of <see cref="T:Inertia.Runtime.Script"/> to remove</typeparam>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.GetScript``1">
            <summary>
            Get the first occurence of the specified <see cref="T:Inertia.Runtime.Script"/> of type <typeparamref name="T"/> or null.
            </summary>
            <typeparam name="T">The target <see cref="T:Inertia.Runtime.Script"/> to get</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.GetScripts``1">
            <summary>
            Get all scripts of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The target <see cref="T:Inertia.Runtime.Script"/> to get</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Dispose">
             <summary>
            
             </summary>
        </member>
    </members>
</doc>
