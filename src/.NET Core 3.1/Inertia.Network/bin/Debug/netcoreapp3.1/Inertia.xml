<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inertia</name>
    </assembly>
    <members>
        <member name="T:Inertia.CommandHooker">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.CommandHooker.GetAllCommands">
            <summary>
            Returns all loaded textual commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.CommandHooker.GetCommandByName(System.String)">
            <summary>
            Returns the <see cref="T:Inertia.TextCommand"/> associated with the specified name.
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.CommandHooker.TryExecuteTextCommand(System.String,System.Object[])">
            <summary>
            Executes a command line and returns the associated <see cref="T:Inertia.TextCommandArgs"/> instance.
            </summary>
            <param name="commandLine"></param>
            <param name="dataCollection">The list of objects to be associated with the command</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.CommandHooker.TryExecuteCommandByName(System.String,System.Object[],System.String[])">
            <summary>
            Executes a <see cref="T:Inertia.TextCommand"/> associated with the specified name.
            </summary>
            <param name="commandName"></param>
            <param name="dataCollection">The list of objects to be associated with the command</param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Inertia.TextCommand">
            <summary>
            Represent the parent heritage of all textual commands
            </summary>
        </member>
        <member name="P:Inertia.TextCommand.Name">
            <summary>
            Returns the name of the command.
            </summary>
        </member>
        <member name="M:Inertia.TextCommand.Execute(Inertia.TextCommandArgs)">
            <summary>
            This method is executed when the command is called
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Inertia.TextCommandArgs">
            <summary>
            Provides methods for accessing arguments when running a <see cref="T:Inertia.TextCommand"/>
            </summary>
        </member>
        <member name="P:Inertia.TextCommandArgs.Name">
            <summary>
            Returns the name of the command executed.
            </summary>
        </member>
        <member name="P:Inertia.TextCommandArgs.Count">
            <summary>
            Returns the number of arguments of the command executed.
            </summary>
        </member>
        <member name="P:Inertia.TextCommandArgs.DataCount">
            <summary>
            Returns the number of data objects of the command executed.
            </summary>
        </member>
        <member name="P:Inertia.TextCommandArgs.Item(System.Int32)">
            <summary>
            Returns the argument of the command executed at the specified index.
            </summary>
            <param name="index">Target index</param>
            <returns>The string argument</returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.GetDataAt``1(System.Int32)">
            <summary>
            Returns the data argument of Type <typeparamref name="T"/> at the specified index
            </summary>
            <typeparam name="T">Target data object type</typeparam>
            <param name="index">Target index</param>
            <returns>The data object as <typeparamref name="T"/></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.GetNextArgument(System.String@)">
            <summary>
            Returns true if an argument is available in the queue otherwise false.
            </summary>
            <param name="argument">The argument result</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.CombineArguments(System.Int32)">
            <summary>
            Combines all arguments of the executed command from the specified index.
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.CombineArguments(System.Int32,System.Int32)">
            <summary>
            Combines all arguments of the executed command from the specified index to the specified length.
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.CombineAllArguments">
            <summary>
            Combines all arguments of the executed command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.GetAllArguments(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.ToString">
            <summary>
            Returns the command line executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.TextCommandArgs.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="T:Inertia.BasicReader">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.BasicReader.IsDisposed">
            <summary>
            Returns true is the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.BasicReader.TotalLength">
            <summary>
            Returns the total length of the stream.
            </summary>
        </member>
        <member name="P:Inertia.BasicReader.UnreadedLength">
            <summary>
            Returns the total unreaded length of the stream.
            </summary>
        </member>
        <member name="P:Inertia.BasicReader.Position">
            <summary>
            Get or Set the position in the stream.
            </summary>
        </member>
        <member name="M:Inertia.BasicReader.#ctor">
            <summary>
            Initialize a new instance with empty data
            </summary>
        </member>
        <member name="M:Inertia.BasicReader.#ctor(System.Text.Encoding)">
            <summary>
            Initialize a new instance with empty data based on the specified <see cref="T:System.Text.Encoding"/>
            </summary>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> for the reader</param>
        </member>
        <member name="M:Inertia.BasicReader.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance with the specified data
            </summary>
            <param name="data">The target byte array</param>
        </member>
        <member name="M:Inertia.BasicReader.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            Initialize a new instance with the specified data based on the specified <see cref="T:System.Text.Encoding"/>
            </summary>
            <param name="data">Data to read</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> for the reader</param>
        </member>
        <member name="M:Inertia.BasicReader.Clear">
            <summary>
            Clear the current stream.
            </summary>
        </member>
        <member name="M:Inertia.BasicReader.Fill(System.Byte[])">
            <summary>
            Fill the current stream with the specified data
            </summary>
            <param name="data">Data to add</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicReader.Fill(System.Byte[],System.Int64)">
            <summary>
            Fill the current stream with the specified data starting at the specified index
            </summary>
            <param name="data">Data to add</param>
            <param name="startIndex">Start index in current stream</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Inertia.BasicReader.RemoveReadedBytes">
            <summary>
            Remove all the readed data in the stream and refresh the stream with the non-readed data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicReader.GetBool">
            <summary>
            Read a <see cref="T:System.Boolean"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Boolean"/> value or false if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetBoolFlag(System.Int32)">
            <summary>
            Read a bool flag based on specified length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicReader.GetString">
            <summary>
            Read a <see cref="T:System.String"/> value with the current instance <see cref="T:System.Text.Encoding"/> algorithm in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.String"/> value or <see cref="F:System.String.Empty"/> if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetByte">
            <summary>
            Read a <see cref="T:System.Byte"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Byte"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetSByte">
            <summary>
            Read a <see cref="T:System.SByte"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.SByte"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetChar">
            <summary>
            Read a <see cref="T:System.Char"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Char"/> value or default <see cref="T:System.Char"/> if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetFloat">
            <summary>
            Read a <see cref="T:System.Single"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Single"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetDouble">
            <summary>
            Read a <see cref="T:System.Double"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Double"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetDecimal">
            <summary>
            Read a <see cref="T:System.Decimal"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Decimal"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetShort">
            <summary>
            Read a <see cref="T:System.Int16"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Int16"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetUShort">
            <summary>
            Read a <see cref="T:System.UInt16"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.UInt16"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetInt">
            <summary>
            Read a <see cref="T:System.Int32"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Int32"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetUInt">
            <summary>
            Read a <see cref="T:System.UInt32"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.UInt32"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetLong">
            <summary>
            Read a <see cref="T:System.Int64"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.Int64"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetULong">
            <summary>
            Read a <see cref="T:System.UInt64"/> value in the stream and change the position
            </summary>
            <returns>Readed <see cref="T:System.UInt64"/> value or 0 if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetBytes">
            <summary>
            Read a byte array (with an <see cref="T:System.Int64"/> length header) in the stream and change the position
            </summary>
            <returns>Readed byte array value or empty byte array if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetBytes(System.Int64)">
            <summary>
            Read specified number of <see cref="T:System.Byte"/> in the stream and change the position
            </summary>
            <param name="length">Length ot the data's buffer</param>
            <returns>Readed byte array of specified length or an empty byte array if nothing can be read</returns>
        </member>
        <member name="M:Inertia.BasicReader.GetDateTime">
            <summary>
            Read DateTime in the stream and change the position
            </summary>
            <returns>Returns a <see cref="T:System.DateTime"/> instance</returns>
        </member>
        <member name="M:Inertia.BasicReader.TryDeserializeObject``1">
            <summary>
            Create an instance of <typeparamref name="T"/> and return it after deserialization
            </summary>
            <returns>Returns a <see cref="T:Inertia.ISerializableObject"/></returns>
        </member>
        <member name="M:Inertia.BasicReader.TryDeserializeData``1">
            <summary>
            Create an instance of <typeparamref name="T"/> and return it after deserialization
            </summary>
            <returns>Returns a <see cref="T:Inertia.ISerializableData"/></returns>
        </member>
        <member name="M:Inertia.BasicReader.GetObject``1">
            <summary>
            Read the next <typeparamref name="T"/> object in the stream having a <see cref="T:System.SerializableAttribute"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Deserialized instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Inertia.BasicReader.GetObject">
            <summary>
            Read the next object in the stream having a <see cref="T:System.SerializableAttribute"/>
            </summary>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Inertia.BasicReader.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.BasicReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Inertia.BasicWriter">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.BasicWriter.IsDisposed">
            <summary>
            Returns true is the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.BasicWriter.TotalLength">
            <summary>
            Returns the total length of the stream.
            </summary>
        </member>
        <member name="P:Inertia.BasicWriter.Position">
            <summary>
            Get or Set the position in the stream.
            </summary>
        </member>
        <member name="M:Inertia.BasicWriter.#ctor">
            <summary>
            Initialize a new instance based on <see cref="P:System.Text.Encoding.UTF8"/> algorithm
            </summary>
        </member>
        <member name="M:Inertia.BasicWriter.#ctor(System.Text.Encoding)">
            <summary>
            Initialize a new instance based on the specified <see cref="T:System.Text.Encoding"/> algorithm
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:Inertia.BasicWriter.Clear">
            <summary>
            Clear the current stream.
            </summary>
        </member>
        <member name="M:Inertia.BasicWriter.SetEmpty(System.UInt32)">
            <summary>
            Write empty data of specified size
            </summary>
            <param name="size">Target byte array size</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetBool(System.Boolean)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetBoolFlag(System.Boolean[])">
            <summary>
            Write a bool flag
            </summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:Inertia.BoolFlagTooLargeException"></exception>
        </member>
        <member name="M:Inertia.BasicWriter.SetString(System.String)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetFloat(System.Single)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetDecimal(System.Decimal)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetDouble(System.Double)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetByte(System.Byte)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetSByte(System.SByte)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetChar(System.Char)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetShort(System.Int16)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetUShort(System.UInt16)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetInt(System.Int32)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetUInt(System.UInt32)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetLong(System.Int64)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetULong(System.UInt64)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetBytes(System.Byte[])">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetBytesWithoutHeader(System.Byte[])">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetDateTime(System.DateTime)">
            <summary>
            Write the specified value in the stream
            </summary>
            <param name="value">Value to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetSerializableObject(Inertia.ISerializableObject)">
            <summary>
            Write customized serializable object in the stream
            </summary>
            <param name="obj"><see cref="T:Inertia.ISerializableObject"/> to serialize</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetSerializableData(Inertia.ISerializableData)">
            <summary>
            Write customized serializable object in the stream
            </summary>
            <param name="data"><see cref="T:Inertia.ISerializableData"/> to serialize</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetObject``1(``0)">
            <summary>
            Write the specified serializable value in the stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The object to serialize</param>
            <returns></returns>
            <exception cref="T:Inertia.TypeNonSerializableException"></exception>
        </member>
        <member name="M:Inertia.BasicWriter.SetValue(System.Object)">
            <summary>
            Automatically write the specified value in the stream
            </summary>
            <param name="value">Serializable value</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.SetValues(System.Object[])">
            <summary>
            Automatically write the specified values in the stream
            </summary>
            <param name="values">Serializable values to write</param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.BasicWriter.ToArray">
            <summary>
            Export all writed data as byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicWriter.ToArrayAndClear">
            <summary>
            Export all writed data as byte array and clear the current instance's data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicWriter.ToArrayAndDispose">
            <summary>
            Export all writed data as byte array and dispose the current instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.BasicWriter.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.BasicWriter.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Inertia.BoolFlagTooLargeException">
            <summary>
            Exception thrown when flag size limit is reached
            </summary>
        </member>
        <member name="P:Inertia.BoolFlagTooLargeException.Message">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.BoolFlagTooLargeException.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.BoolFlagTooLargeException"/>
            </summary>
        </member>
        <member name="T:Inertia.TypeNonSerializableException">
            <summary>
            Exception thrown when a non-serializable object tries to be serialized.
            </summary>
        </member>
        <member name="P:Inertia.TypeNonSerializableException.Message">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.TypeNonSerializableException.ValueType">
            <summary>
            <see cref="T:System.Type"/> that caused the exception
            </summary>
        </member>
        <member name="M:Inertia.TypeNonSerializableException.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.TypeNonSerializableException"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Inertia.ISerializableData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.ISerializableData.Serialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.ISerializableData.Deserialize(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Inertia.ISerializableObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.ISerializableObject.Serialize(Inertia.BasicWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Inertia.ISerializableObject.Deserialize(Inertia.BasicReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Inertia.IOHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.IOHelper.GetFilesFromDirectory(System.String,System.Boolean)">
            <summary>
            Returns the paths to the files contained in the specified location.
            </summary>
            <param name="path">Folder path</param>
            <param name="includeSubFolders"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.AppendAllBytes(System.String,System.Byte[])">
            <summary>
            Appends Bytes to the end of the stream from the specified file.
            </summary>
            <param name="filePath"></param>
            <param name="data"></param>
        </member>
        <member name="M:Inertia.IOHelper.GetSHA256(System.Byte[])">
            <summary>
            Returns the SHA256 representation of the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.GetSHA256(System.IO.FileStream,System.Int32)">
            <summary>
            Returns the SHA256 representation of the specified <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream"></param>
            <param name="bufferLength"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.GzipCompress(System.Byte[],System.Boolean@)">
            <summary>
            Compress and return the specified data.
            </summary>
            <param name="data"></param>
            <param name="hasBetterSize">Returns true if the returned data is lower in length than the non-compressed data</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.GzipDecompress(System.Byte[])">
            <summary>
            Decompress and return the specified data.
            </summary>
            <param name="compressedData"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.EncryptWithString(System.Byte[],System.String)">
            <summary>
            Encrypts the specified data with the specified key.
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.IOHelper.DecryptWithString(System.Byte[],System.String)">
            <summary>
            Decrypts the specified data with the specified key.
            </summary>
            <param name="encryptedData"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Inertia.LoaderManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.LoaderManager.LoadPlugins">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.LoaderManager.TryGetPlugin``1(``0@)">
            <summary>
            Returns the specified <see cref="T:Inertia.Runtime.IInertiaPlugin"/> loaded instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Inertia.AutoQueueExecutor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.AutoQueueExecutor.IsDisposed">
            <summary>
            Returns true if the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.AutoQueueExecutor.Count">
            <summary>
            Returns the number of actions currently queued.
            </summary>
        </member>
        <member name="M:Inertia.AutoQueueExecutor.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.AutoQueueExecutor"/>
            </summary>
        </member>
        <member name="M:Inertia.AutoQueueExecutor.Enqueue(BasicAction[])">
            <summary>
            Enqueue the specified actions at the end of the queue.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:Inertia.AutoQueueExecutor.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Inertia.ManualQueueExecutor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.ManualQueueExecutor.IsDisposed">
            <summary>
            Returns true if the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.ManualQueueExecutor.Count">
            <summary>
            Returns the number of actions currently queued.
            </summary>
        </member>
        <member name="M:Inertia.ManualQueueExecutor.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.ManualQueueExecutor"/>
            </summary>
        </member>
        <member name="M:Inertia.ManualQueueExecutor.Enqueue(BasicAction[])">
            <summary>
            Enqueue the specified actions at the end of the queue.
            </summary>
            <param name="actions"></param>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.ManualQueueExecutor.Execute">
            <summary>
            Execute all the actions queued and remove them from the queue.
            </summary>
        </member>
        <member name="M:Inertia.ManualQueueExecutor.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="T:Inertia.Runtime.Script">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.DeltaTime">
            <summary>
            Returns the time elapsed since the last execution frame. 
            </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.IsDestroyed">
            <summary>
            Returns true is the current instance is destroyed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnAwake(Inertia.Runtime.ScriptArgumentsCollection)">
            <summary>
            Occurs when the script initializes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Inertia.Runtime.Script.OnUpdate">
            <summary>
            Occurs each execution frame.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnDestroy">
            <summary>
            Occurs before the script is destroyed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Destroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Inertia.Runtime.ScriptCollection">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptCollection.Count">
            <summary>
            Returns the number of <see cref="T:Inertia.Runtime.Script"/> running in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptCollection.IsDisposed">
            <summary>
            Returns true if the currnet instance is disposed.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.Runtime.ScriptCollection"/>
            </summary>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Add``1(System.Object[])">
            <summary>
            Create a new instance of <typeparamref name="T"/> with the specified arguments.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the target <see cref="T:Inertia.Runtime.Script"/></typeparam>
            <param name="args"></param>
            <returns>Returns the created instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Remove``1">
            <summary>
            Remove the first occurence of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of <see cref="T:Inertia.Runtime.Script"/> to remove</typeparam>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.RemoveAll``1">
            <summary>
            Remove all <see cref="T:Inertia.Runtime.Script"/> of type <typeparamref name="T"/> running in the collection.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of <see cref="T:Inertia.Runtime.Script"/> to remove</typeparam>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.GetScript``1">
            <summary>
            Get the first occurence of the specified <see cref="T:Inertia.Runtime.Script"/> of type <typeparamref name="T"/> or null.
            </summary>
            <typeparam name="T">The target <see cref="T:Inertia.Runtime.Script"/> to get</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.GetScripts``1">
            <summary>
            Get all scripts of type <typeparamref name="T"/> in the collection.
            </summary>
            <typeparam name="T">The target <see cref="T:Inertia.Runtime.Script"/> to get</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptCollection.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="T:Inertia.Runtime.ScriptArgumentsCollection">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.IsDisposed">
            <summary>
            Returns true if the current instance is disposed.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Count">
            <summary>
            Returns the number of arguments in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Position">
            <summary>
            Returns the next argument position in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArgumentsCollection.Item(System.Int32)">
            <summary>
            Returns the argument as object at the specified index in the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.GetArgumentAt``1(System.Int32)">
            <summary>
            Returns the argument as <typeparamref name="T"/> at the specified index in the collection.
            </summary>
            <typeparam name="T">Specified <see cref="T:System.Type"/> to cast</typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.GetNextArgument``1">
            <summary>
            Returns the next argument based on <see cref="P:Inertia.Runtime.ScriptArgumentsCollection.Position"/> field casted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target <see cref="T:System.Type"/> of the argument</typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.ScriptArgumentsCollection.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="T:Inertia.Runtime.IInertiaPlugin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.Runtime.IInertiaPlugin.OnInitialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.Runtime.IInertiaPlugin.OnExecute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Inertia.Runtime.Run.ExecuteScriptIn">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inertia.Runtime.Run.ExecuteScriptIn.Permanent">
            <summary>
            Returns true if the current instance run permanently.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Run.Delayed(System.Single,BasicAction{Inertia.Runtime.Run.ExecuteScriptIn},System.Boolean)">
            <summary>
            
            </summary>
            <param name="delayInSeconds"></param>
            <param name="callback"></param>
            <param name="permanent"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.Run.Delayed(System.Single,BasicAction{Inertia.Runtime.Run.ExecuteScriptIn},System.Single)">
            <summary>
            
            </summary>
            <param name="delayInSeconds"></param>
            <param name="callback"></param>
            <param name="runningTime"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Runtime.Run.ToNextFrame(BasicAction)">
            <summary>
            
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Inertia.Clock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.Clock.GetElapsedMilliseconds(BasicAction)">
            <summary>
            Automatically creates an instance of the class <see cref="T:Inertia.Clock"/> and returns in milliseconds the execution time of the indicated code
            </summary>
            <param name="handler">The code to execute</param>
            <returns>Time elapsed in milliseconds</returns>
        </member>
        <member name="M:Inertia.Clock.GetElapsedSeconds(BasicAction)">
            <summary>
            Automatically creates an instance of the class <see cref="T:Inertia.Clock"/> and returns in seconds the execution time of the indicated code
            </summary>
            <param name="handler">The code to execute</param>
            <returns>Time elapsed in seconds</returns>
        </member>
        <member name="M:Inertia.Clock.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.Clock"/>
            </summary>
        </member>
        <member name="M:Inertia.Clock.Reset">
            <summary>
            Reset the clock's time
            </summary>
            <returns>Returns the current instance</returns>
        </member>
        <member name="M:Inertia.Clock.GetElapsedMilliseconds">
            <summary>
            Returns in milliseconds the execution time since the last reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.Clock.GetElapsedMillisecondsAndReset">
            <summary>
            Returns in milliseconds the execution time since the last reset and then reset the clock
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.Clock.GetElapsedSeconds">
            <summary>
            Returns in seconds the execution time since the last reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inertia.Clock.GetElapsedSecondsAndReset">
            <summary>
            Returns in seconds the execution time since the last reset and then reset the clock
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inertia.CoreRequestHeaders">
            <summary>
            HTTP Headers
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Accept">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Expect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Host">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Referer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.TransferEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.UserAgent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Inertia.RequestParameters">
            <summary>
            Contains the parameters of an HTTP request
            </summary>
        </member>
        <member name="M:Inertia.RequestParameters.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.RequestParameters"/>
            </summary>
        </member>
        <member name="M:Inertia.RequestParameters.AddHeader(System.String,System.String)">
            <summary>
            Add an HTTP header to the request
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetCoreHeader(Inertia.CoreRequestHeaders,System.String)">
            <summary>
            Add an HTTP specific header to the request
            </summary>
            <param name="header"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetAutomaticDecompression(System.Net.DecompressionMethods)">
            <summary>
            Set the request's <see cref="T:System.Net.DecompressionMethods"/>
            </summary>
            <param name="decompressionMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetContentLength(System.Int64)">
            <summary>
            Set the request's content length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetDate(System.DateTime)">
            <summary>
            Set the request's date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetIfModifiedSince(System.DateTime)">
            <summary>
            Set the request's modified since date
            </summary>
            <param name="modifiedSince"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetProxy(System.Net.IWebProxy)">
            <summary>
            Set the request's proxy
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="T:Inertia.WebHelper">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inertia.WebHelper.GetRequest(System.Uri,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestAsync(System.Uri,BasicAction{System.String},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestData(System.Uri,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestDataAsync(System.Uri,BasicAction{System.Byte[]},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequest(System.Uri,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequest(System.Uri,System.String,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestData(System.Uri,System.String,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestAsync(System.Uri,System.String,BasicAction{System.String},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestDataAsync(System.Uri,System.String,BasicAction{System.Byte[]},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:BasicAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicAction`1">
             <summary>
            
             </summary>
        </member>
        <member name="T:BasicAction`2">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicAction`3">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicAction`4">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicAction`5">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicReturnAction`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicReturnAction`2">
            <summary>
            
            </summary>
        </member>
        <member name="T:BasicReturnAction`3">
             <summary>
            
             </summary>
        </member>
        <member name="T:BasicReturnAction`4">
             <summary>
            
             </summary>
        </member>
        <member name="T:BasicReturnAction`5">
             <summary>
            
             </summary>
        </member>
        <member name="T:BasicReturnAction`6">
             <summary>
            
             </summary>
        </member>
        <member name="T:Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Extensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle the specified <see cref="T:System.Collections.Generic.IList`1"/> object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collectionToShuffle"></param>
        </member>
        <member name="M:Extensions.GetSHA256(System.String)">
            <summary>
            Returns the SHA256 representation of the specified text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.GetSHA256(System.String,System.Text.Encoding)">
            <summary>
            Returns the SHA256 representation of the specified text.
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.GzipCompress(System.Byte[],System.Boolean@)">
            <summary>
            Compress and return the specified data.
            </summary>
            <param name="data"></param>
            <param name="hasBetterSize">Returns true if the returned data is lower in length than the non-compressed data</param>
            <returns></returns>
        </member>
        <member name="M:Extensions.GzipDecompress(System.Byte[])">
            <summary>
            Decompress and return the specified data.
            </summary>
            <param name="compressedData"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.EncryptWithString(System.Byte[],System.String)">
            <summary>
            Encrypts the specified data with the specified key.
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.DecryptWithString(System.Byte[],System.String)">
            <summary>
            Decrypts the specified data with the specified key.
            </summary>
            <param name="encryptedData"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.CreateFlag(System.Boolean[])">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.GetBits(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="flag"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
    </members>
</doc>
