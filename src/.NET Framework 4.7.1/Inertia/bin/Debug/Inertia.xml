<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inertia</name>
    </assembly>
    <members>
        <member name="T:Inertia.InitializationException">
            <summary>
            This exception is thrown in case an error occurs during the initialization of a core component.
            </summary>
        </member>
        <member name="T:Inertia.BoolFlagTooLargeException">
            <summary>
            Exception thrown when flag size limit is reached
            </summary>
        </member>
        <member name="T:Inertia.IAutoSerializable">
            <summary>
            Allows the system to automatically serialize or deserialize the fields of an instance (using the attributes <see cref="T:Inertia.CustomSerialization"/> and <see cref="T:Inertia.CustomDeserialization"/>)
            </summary>
        </member>
        <member name="T:Inertia.CommandHooker">
            <summary>
            Core component for command line management and execution.
            </summary>
        </member>
        <member name="P:Inertia.Network.UdpServerEntity.IsInitialized">
            <summary>
            Returns true if <see cref="M:Inertia.Network.UdpServerEntity.Start"/> was called successfully.
            </summary>
        </member>
        <member name="T:Inertia.Network.DefaultNetworkProtocol">
            <summary>
            Represents the default network protocol used by network entities.
            </summary>
        </member>
        <member name="M:Inertia.Network.DefaultNetworkProtocol.OnSerializeMessage(Inertia.Network.NetworkMessage)">
            <summary>
            Occurs when a <see cref="T:Inertia.Network.NetworkMessage"/> is requested to be written before being sent.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Network.DefaultNetworkProtocol.OnParseMessage(System.Object,Inertia.BasicReader,Inertia.Network.MessageParsingOutput)">
            <summary>
            Occurs when data are received and have to be parsed
            </summary>
            <param name="receiver"></param>
            <param name="reader"></param>
            <param name="output"></param>
            <returns></returns>
            <exception cref="!:DefaultProtocolFailedParsingMessageException"></exception>
        </member>
        <member name="M:Inertia.Network.NetworkProtocol.GetCaller(System.Object)">
            <summary>
            Returns the instance of <see cref="T:Inertia.Network.NetworkMessageCaller"/> associated with the indicated <see cref="T:Inertia.Network.NetworkMessage"/> or null.
            </summary>
            <param name="receiver"></param>
        </member>
        <member name="P:Inertia.Network.NetworkProtocol.NetworkBufferLength">
            <summary>
            The size of the buffer to be used for network communication.
            </summary>
        </member>
        <member name="M:Inertia.Network.NetworkProtocol.OnSerializeMessage(Inertia.Network.NetworkMessage)">
            <summary>
            Occurs when a <see cref="T:Inertia.Network.NetworkMessage"/> is requested to be written before being sent.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Inertia.Network.UnknownMessageException">
            <summary>
            Thrown when using a <see cref="T:System.Type"/> that isn't a subclass of <see cref="T:Inertia.Network.NetworkMessage"/>
            </summary>
        </member>
        <member name="T:Inertia.Network.UserDatagramDataLengthLimitException">
            <summary>
            Thrown when sending more than <see cref="F:System.UInt16.MaxValue"/> bytes from UDP protocol
            </summary>
        </member>
        <member name="T:Inertia.Network.IMessageHooker">
            <summary>
            Tells the network protocol that the object can contain static message hookers.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.Script.DeltaTime">
            <summary>
            Returns the time elapsed since the last execution frame. 
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnUpdate">
            <summary>
            Occurs each execution frame.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Script.OnInitialize(Inertia.Runtime.ScriptArguments)">
            <summary>
            Occurs when the script initializes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Inertia.Runtime.Script.OnDestroy">
            <summary>
            Occurs before the script is destroyed.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArguments.Count">
            <summary>
            Returns the number of arguments in the collection.
            </summary>
        </member>
        <member name="P:Inertia.Runtime.ScriptArguments.Item(System.Int32)">
            <summary>
            Returns the argument as object at the specified index in the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Inertia.Runtime.Run.ExecuteScriptIn.Permanent">
            <summary>
            Returns true if the current script run permanently.
            </summary>
        </member>
        <member name="M:Inertia.Runtime.Run.RuntimeCall(System.Single)">
            <summary>
            Execute the Runtime cycle manually.
            </summary>
        </member>
        <member name="T:Inertia.CoreRequestHeaders">
            <summary>
            HTTP Headers
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Accept">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Expect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Host">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.Referer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.TransferEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.CoreRequestHeaders.UserAgent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Inertia.RequestParameters">
            <summary>
            Contains the parameters of an HTTP request
            </summary>
        </member>
        <member name="M:Inertia.RequestParameters.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:Inertia.RequestParameters"/>
            </summary>
        </member>
        <member name="M:Inertia.RequestParameters.AddHeader(System.String,System.String)">
            <summary>
            Add an HTTP header to the request
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetCoreHeader(Inertia.CoreRequestHeaders,System.String)">
            <summary>
            Add an HTTP specific header to the request
            </summary>
            <param name="header"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetAutomaticDecompression(System.Net.DecompressionMethods)">
            <summary>
            Set the request's <see cref="T:System.Net.DecompressionMethods"/>
            </summary>
            <param name="decompressionMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetContentLength(System.Int64)">
            <summary>
            Set the request's content length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetDate(System.DateTime)">
            <summary>
            Set the request's date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetIfModifiedSince(System.DateTime)">
            <summary>
            Set the request's modified since date
            </summary>
            <param name="modifiedSince"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.RequestParameters.SetProxy(System.Net.IWebProxy)">
            <summary>
            Set the request's proxy
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequest(System.Uri)">
            <summary>
            Execute a HTTP GET request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequest(System.Uri,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestAsync(System.Uri,BasicAction{System.String})">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestAsync(System.Uri,BasicAction{System.String},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestData(System.Uri)">
            <summary>
            Execute a HTTP GET request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestData(System.Uri,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestDataAsync(System.Uri,BasicAction{System.Byte[]})">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.GetRequestDataAsync(System.Uri,BasicAction{System.Byte[]},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP GET request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequest(System.Uri)">
            <summary>
            Execute a HTTP POST request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequest(System.Uri,System.String)">
            <summary>
            Execute a HTTP POST request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequest(System.Uri,System.String,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request with specified parameters and return the string response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestData(System.Uri,System.String)">
            <summary>
            Execute a HTTP POST request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestData(System.Uri,System.String,Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request and return the data response.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestAsync(System.Uri,System.String,BasicAction{System.String})">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestAsync(System.Uri,System.String,BasicAction{System.String},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestDataAsync(System.Uri,System.String,BasicAction{System.Byte[]})">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Inertia.WebHelper.PostRequestDataAsync(System.Uri,System.String,BasicAction{System.Byte[]},Inertia.RequestParameters)">
            <summary>
            Execute a HTTP POST request asynchronously.
            </summary>
            <param name="uriRequest"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Extensions.ToByte(System.Boolean[])">
            <summary>
            Create a byte flag containing specified boolean values
            </summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:Inertia.BoolFlagTooLargeException"></exception>
        </member>
        <member name="M:Extensions.ToBits(System.Byte,System.Int32)">
            <summary>
            Read boolean values from a byte flag
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
    </members>
</doc>
