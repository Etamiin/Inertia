<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inertia.Web</name>
    </assembly>
    <members>
        <member name="T:Inertia.Web.FtpDownloader">
            <summary>
            Represent the ftp downloader class
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpDownloader.QueueDownloaded">
            <summary>
            Occurs when the current queue is completely downloaded
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpDownloader.FileDownloadStarted">
            <summary>
            Occurs when a file start to be downloaded
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpDownloader.FileDownloadProgress">
            <summary>
            Occurs when a file downloading progress
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpDownloader.FileDownloaded">
            <summary>
            Occurs when a file download is completed
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpDownloader.FileDownloadFailed">
            <summary>
            Occurs when a file download failed
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpDownloader.IsDisposed">
            <summary>
            Return true if the current instance is disposed
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpDownloader.IsBusy">
            <summary>
            Return true if the current instance is busy
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpDownloader.StopOnMaxAttempts">
            <summary>
            Get or set if the current procedure need to be cancelled when the attempt limit has been reached
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpDownloader.MaxAttempts">
            <summary>
            Get or set the max attempts
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpDownloader.QueuedCount">
            <summary>
            Get the number of files queued
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpDownloader.#ctor(Inertia.Web.FtpCredential)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.WebDownloader"/>
            </summary>
            <param name="credentials">Credentials to use</param>
        </member>
        <member name="M:Inertia.Web.FtpDownloader.Enqueue(System.String,System.String[])">
            <summary>
            Enqueue specified uris associated to the specified path
            </summary>
            <param name="uris">Uris to download</param>
            <param name="folderDestinationPath">Folder path where to save the download file</param>
        </member>
        <member name="M:Inertia.Web.FtpDownloader.DownloadQueue">
            <summary>
            Start the download on the queue
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpDownloader.DownloadQueueAsync">
            <summary>
            Start the download of the queue asynchronously
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpDownloader.Dispose">
            <summary>
            Dispose the current instance
            </summary>
        </member>
        <member name="T:Inertia.Web.FtpUploader">
            <summary>
            Allows uploading data to the web using FTP credentials
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpUploader.QueueUploaded">
            <summary>
            Occurs when the current queue is completely uploaded
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpUploader.FileUploadStarted">
            <summary>
            Occurs when a file start to be uploaded
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpUploader.FileUploadProgress">
            <summary>
            Occurs when a file uploading progress
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpUploader.FileUploaded">
            <summary>
            Occurs when a file upload is completed
            </summary>
        </member>
        <member name="E:Inertia.Web.FtpUploader.FileUploadFailed">
            <summary>
            Occurs when a file upload failed
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.IsDisposed">
            <summary>
            Return true if the current instance is disposed
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.IsBusy">
            <summary>
            Return true if the current instance is busy
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.StopOnMaxAttempts">
            <summary>
            Get or set if the current procedure need to be cancelled when the attempt limit has been reached
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.MaxAttempts">
            <summary>
            Get or set the max attempts
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.Credentials">
            <summary>
            Get the credentials used in the current instance
            </summary>
        </member>
        <member name="P:Inertia.Web.FtpUploader.QueuedCount">
            <summary>
            Get the number of files in the queue
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpUploader.#ctor(Inertia.Web.FtpCredential)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.FtpUploader"/>
            </summary>
            <param name="credentials">Credentials to use for uploading data</param>
        </member>
        <member name="M:Inertia.Web.FtpUploader.EnqueueFile(System.String)">
            <summary>
            Enqueue the current path file
            </summary>
            <param name="path">Path of the file to upload</param>
        </member>
        <member name="M:Inertia.Web.FtpUploader.EnqueueFile(System.String,System.String)">
            <summary>
            Enqueue the current path file with an destination folder specification
            </summary>
            <param name="path">Path of the file to upload</param>
            <param name="ftpDestinationFolder">Ftp folder destination uri</param>
        </member>
        <member name="M:Inertia.Web.FtpUploader.EnqueueFolder(System.String,System.Boolean)">
            <summary>
            Enqueue all the files in the specified folder path
            </summary>
            <param name="folderPath">Folder where to get the files</param>
            <param name="inheritance">True if sub folders need to be added</param>
        </member>
        <member name="M:Inertia.Web.FtpUploader.EnqueueFolder(System.String,System.String,System.Boolean)">
            <summary>
            Enqueue all the files in the specified folder path with an destination folder specification
            </summary>
            <param name="folderPath">Folder where to get the files</param>
            <param name="ftpDestinationFolder">Ftp folder destination uri</param>
            <param name="inheritance">True if sub folders need to be added</param>
        </member>
        <member name="M:Inertia.Web.FtpUploader.UploadQueue">
            <summary>
            Start the upload of the queue
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpUploader.UploadQueueAsync">
            <summary>
            Start the upload of the queue asynchronously
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpUploader.Dispose">
            <summary>
            Dispose the current instance
            </summary>
        </member>
        <member name="T:Inertia.Web.WebDownloader">
            <summary>
            Represent the web downloader class
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.QueueDownloaded">
            <summary>
            Occurs when the current queue is completely downloaded
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.QueueDownloadProgress">
            <summary>
            Occurs when the current queue downloading progress
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.FileDownloadStarted">
            <summary>
            Occurs when a file start to be downloaded
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.FileDownloadProgress">
            <summary>
            Occurs when a file downloading progress
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.FileDownloaded">
            <summary>
            Occurs when a file download is completed
            </summary>
        </member>
        <member name="E:Inertia.Web.WebDownloader.FileDownloadFailed">
            <summary>
            Occurs when a file download failed
            </summary>
        </member>
        <member name="P:Inertia.Web.WebDownloader.IsDisposed">
            <summary>
            Return true if the current instance is disposed
            </summary>
        </member>
        <member name="P:Inertia.Web.WebDownloader.IsBusy">
            <summary>
            Return true if the current instance is busy
            </summary>
        </member>
        <member name="P:Inertia.Web.WebDownloader.StopOnMaxAttempts">
            <summary>
            Get or set if the current procedure need to be cancelled when the attempt limit has been reached
            </summary>
        </member>
        <member name="P:Inertia.Web.WebDownloader.MaxAttempts">
            <summary>
            Get or set the max attempts
            </summary>
        </member>
        <member name="P:Inertia.Web.WebDownloader.QueuedCount">
            <summary>
            Get the number of files queued
            </summary>
        </member>
        <member name="M:Inertia.Web.WebDownloader.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.WebDownloader"/>
            </summary>
            <param name="baseUri">Base uri to use</param>
        </member>
        <member name="M:Inertia.Web.WebDownloader.Enqueue(System.String,System.String[])">
            <summary>
            Enqueue specified uris associated to the specified path
            </summary>
            <param name="uris">Uris to download</param>
            <param name="folderDestinationPath">Folder path where to save the download file</param>
        </member>
        <member name="M:Inertia.Web.WebDownloader.DownloadQueue">
            <summary>
            Start the download on the queue
            </summary>
        </member>
        <member name="M:Inertia.Web.WebDownloader.DownloadQueueAsync">
            <summary>
            Start the download of the queue asynchronously
            </summary>
        </member>
        <member name="M:Inertia.Web.WebDownloader.Dispose">
            <summary>
            Dispose the current instance
            </summary>
        </member>
        <member name="T:Inertia.Web.FtpCredential">
            <summary>
            Contains login informations for FTP access
            </summary>
        </member>
        <member name="F:Inertia.Web.FtpCredential.Username">
            <summary>
            Get the username of the login informations
            </summary>
        </member>
        <member name="F:Inertia.Web.FtpCredential.Password">
            <summary>
            Get the password of the login informations
            </summary>
        </member>
        <member name="F:Inertia.Web.FtpCredential.Host">
            <summary>
            Getthe host of the login informations
            </summary>
        </member>
        <member name="F:Inertia.Web.FtpCredential.Port">
            <summary>
            Get the port of the login informations
            </summary>
        </member>
        <member name="M:Inertia.Web.FtpCredential.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.FtpCredential"/>
            </summary>
            <param name="username">Username of the ftp login</param>
            <param name="password">Password of the ftp login</param>
            <param name="host">Host of the ftp login</param>
        </member>
        <member name="M:Inertia.Web.FtpCredential.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.FtpCredential"/>
            </summary>
            <param name="username">Username of the ftp login</param>
            <param name="password">Password of the ftp login</param>
            <param name="host">Host of the ftp login</param>
            <param name="port">Port of the ftp login</param>
        </member>
        <member name="M:Inertia.Web.FtpCredential.op_Implicit(Inertia.Web.FtpCredential)~System.Net.NetworkCredential">
            <summary>
            Transform a <see cref="T:Inertia.Web.FtpCredential"/> instance to an <see cref="T:System.Net.NetworkCredential"/> instance
            </summary>
            <param name="credentials">Instance to transform</param>
        </member>
        <member name="T:Inertia.Web.WebProgressFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Inertia.Web.WebProgressFile.Path">
            <summary>
            Get the path of the current file
            </summary>
        </member>
        <member name="F:Inertia.Web.WebProgressFile.Name">
            <summary>
            Get the name of the current file
            </summary>
        </member>
        <member name="F:Inertia.Web.WebProgressFile.DestinationPath">
            <summary>
            Get the destination path of the current file
            </summary>
        </member>
        <member name="P:Inertia.Web.WebProgressFile.TotalBytes">
            <summary>
            Get the total bytes 
            </summary>
        </member>
        <member name="P:Inertia.Web.WebProgressFile.CurrentBytes">
            <summary>
            Get the current bytes
            </summary>
        </member>
        <member name="P:Inertia.Web.WebProgressFile.ProgressPercentage">
            <summary>
            Get the percentage progression
            </summary>
        </member>
        <member name="T:Inertia.Web.EnqueueInvalidInformationsException">
            <summary>
            Thrown when an uri or path is invalid
            </summary>
        </member>
        <member name="P:Inertia.Web.EnqueueInvalidInformationsException.Message">
            <summary>
            Get the exception message
            </summary>
        </member>
        <member name="M:Inertia.Web.EnqueueInvalidInformationsException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.EnqueueInvalidInformationsException"/>
            </summary>
            <param name="uri">Uri or path that caused the exception</param>
        </member>
        <member name="T:Inertia.Web.WebModuleBusyException">
            <summary>
            Thrown when using a web class module that is busy
            </summary>
        </member>
        <member name="P:Inertia.Web.WebModuleBusyException.Message">
            <summary>
            Get the exception message
            </summary>
        </member>
        <member name="M:Inertia.Web.WebModuleBusyException.#ctor">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.Web.WebModuleBusyException"/>
            </summary>
        </member>
        <member name="T:Inertia.Web.WebHelper">
            <summary>
            Offers multiple utilities functions for web networking
            </summary>
        </member>
        <member name="M:Inertia.Web.WebHelper.GetRequest(System.Uri)">
            <summary>
            Execute a HTTP GET request and return the string response
            </summary>
            <param name="uriRequest">Uri to request</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.GetRequestData(System.Uri)">
            <summary>
            Execute a HTTP GET request and return the byte[] data response
            </summary>
            <param name="uriRequest">Uri to request</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.GetRequestAsync(System.Uri,BasicAction{System.String})">
            <summary>
            Execute a HTTP GET asynchronously request
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="callback">Action to execute when receiving response</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.GetRequestDataAsync(System.Uri,BasicAction{System.Byte[]})">
            <summary>
            Execute a HTTP GET asynchronously request
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="callback">Action to execute when receiving response</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.PostRequest(System.Uri,System.String,System.String)">
            <summary>
            Execute a HTTP POST request and return the string response
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="data">Data to post</param>
            <param name="contentType">Content-Type of the request</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.PostRequestData(System.Uri,System.String,System.String)">
            <summary>
            Execute a HTTP POST request and return the byte[] data response
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="data">Data to post</param>
            <param name="contentType">Content-Type of the request</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.PostRequestAsync(System.Uri,System.String,BasicAction{System.String},System.String)">
            <summary>
            Execute a HTTP POST asynchronously request
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="data">Data to post</param>
            <param name="callback">Action to execute when receiving response</param>
            <param name="contentType">Content-Type of the request</param>
            <returns></returns>
        </member>
        <member name="M:Inertia.Web.WebHelper.PostRequestDataAsync(System.Uri,System.String,BasicAction{System.Byte[]},System.String)">
            <summary>
            Execute a HTTP POST asynchronously request
            </summary>
            <param name="uriRequest">Uri to request</param>
            <param name="data">Data to post</param>
            <param name="callback">Action to execute when receiving response</param>
            <param name="contentType">Content-Type of the request</param>
            <returns></returns>
        </member>
        <member name="T:DownloadUpdateHandler">
            <summary>
            Web downloading updating handler
            </summary>
            <param name="webFile"></param>
        </member>
        <member name="T:DownloadFailedHandler">
            <summary>
            Web downloading failing handler
            </summary>
            <param name="webFile"></param>
            <param name="error"></param>
        </member>
        <member name="T:UploadFileUpdateHandler">
            <summary>
            Web uploading updating handler
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:UploadFileFailedHandler">
            <summary>
            Web uploading failing handler
            </summary>
            <param name="file"></param>
            <param name="exception"></param>
        </member>
    </members>
</doc>
