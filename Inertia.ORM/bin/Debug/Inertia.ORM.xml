<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inertia.ORM</name>
    </assembly>
    <members>
        <member name="T:Inertia.ORM.AutoGenerateTables">
            <summary>
            Represent the state that will automatically create all tables in a <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.AutoGenerateTables.#ctor">
            <summary>
            Instantiate a new instance of the class <see cref="!:AutoCreateTables"/>
            </summary>
        </member>
        <member name="T:Inertia.ORM.DatabaseAttach">
            <summary>
            Represents the link between a table and a database
            </summary>
        </member>
        <member name="F:Inertia.ORM.DatabaseAttach.DatabaseType">
            <summary>
            Database type attached to
            </summary>
        </member>
        <member name="F:Inertia.ORM.DatabaseAttach.DatabaseName">
            <summary>
            Database name attached to
            </summary>
        </member>
        <member name="M:Inertia.ORM.DatabaseAttach.#ctor(System.Type)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.DatabaseAttach"/>
            </summary>
            <param name="databaseType">Database type to attach</param>
        </member>
        <member name="M:Inertia.ORM.DatabaseAttach.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.DatabaseAttach"/>
            </summary>
            <param name="databaseName">Database name to attach</param>
        </member>
        <member name="T:Inertia.ORM.IgnoreDatabase">
            <summary>
            Define for a <see cref="T:Inertia.ORM.Database"/> that is ignored at the initialization
            </summary>
        </member>
        <member name="M:Inertia.ORM.IgnoreDatabase.#ctor">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.IgnoreDatabase"/>
            </summary>
        </member>
        <member name="T:Inertia.ORM.IgnoreField">
            <summary>
            Define for a field that is ignored by the ORM system
            </summary>
        </member>
        <member name="M:Inertia.ORM.IgnoreField.#ctor">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.IgnoreField"/>
            </summary>
        </member>
        <member name="T:Inertia.ORM.IgnoreTableCreation">
            <summary>
            Define for a table that its creation is to be ignored
            </summary>
        </member>
        <member name="M:Inertia.ORM.IgnoreTableCreation.#ctor">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.IgnoreTableCreation"/>
            </summary>
        </member>
        <member name="T:Inertia.ORM.PrimaryKey">
            <summary>
            Represent a primarykey field in a table
            </summary>
        </member>
        <member name="F:Inertia.ORM.PrimaryKey.AutoIncrement">
            <summary>
            The field is set as auto increment if true
            </summary>
        </member>
        <member name="M:Inertia.ORM.PrimaryKey.#ctor(System.Boolean)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.PrimaryKey"/>
            </summary>
            <param name="autoIncrement">Set the auto increment state of the primary key field</param>
        </member>
        <member name="T:Inertia.ORM.NotNull">
            <summary>
            Add a "NOT NULL" statement to the field
            </summary>
        </member>
        <member name="F:Inertia.ORM.NotNull.Unique">
            <summary>
            Unique statement
            </summary>
        </member>
        <member name="M:Inertia.ORM.NotNull.#ctor(System.Boolean)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.NotNull"/>
            </summary>
            <param name="unique">Add unique statement to the field ?</param>
        </member>
        <member name="T:Inertia.ORM.VarChar">
            <summary>
            Represent a varchar field in a table
            </summary>
        </member>
        <member name="F:Inertia.ORM.VarChar.Length">
            <summary>
            Max length of the varchar field
            </summary>
        </member>
        <member name="M:Inertia.ORM.VarChar.#ctor(System.Int32)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.VarChar"/>
            </summary>
            <param name="length"></param>
        </member>
        <member name="T:Inertia.ORM.Database">
            <summary>
            Represent the database class
            </summary>
        </member>
        <member name="M:Inertia.ORM.Database.Create(System.String,System.String,System.String,System.String,BasicAction,System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:Inertia.ORM.RuntimeDatabase"/> with specified informations
            </summary>
            <param name="name"></param>
            <param name="host"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="onCreated"></param>
            <param name="port"></param>
            <param name="autoGenerate"></param>
            <returns></returns>
        </member>
        <member name="P:Inertia.ORM.Database.Name">
            <summary>
            Get the name of the database
            </summary>
        </member>
        <member name="P:Inertia.ORM.Database.Host">
            <summary>
            Get the host ip of the database
            </summary>
        </member>
        <member name="P:Inertia.ORM.Database.User">
            <summary>
            Get the username to use for the connection
            </summary>
        </member>
        <member name="P:Inertia.ORM.Database.Password">
            <summary>
            Get the password to use for the connection
            </summary>
        </member>
        <member name="P:Inertia.ORM.Database.Port">
            <summary>
            Get the port to use for the connection
            </summary>
        </member>
        <member name="M:Inertia.ORM.Database.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inertia.ORM.Database.OnCreated">
            <summary>
            Happens one time after the initialization (after creating <see cref="T:Inertia.ORM.Table"/>)
            </summary>
        </member>
        <member name="M:Inertia.ORM.Database.GetTable``1">
            <summary>
            Get a <see cref="T:Inertia.ORM.Table"/> instance based on the <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.ORM.Database.CreateAllTables">
            <summary>
            Create all tables of the current <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="T:Inertia.ORM.Table">
            <summary>
            Represent the table class
            </summary>
        </member>
        <member name="P:Inertia.ORM.Table.TableName">
            <summary>
            Get the name of the table
            </summary>
        </member>
        <member name="P:Inertia.ORM.Table.Database">
            <summary>
            Get the <see cref="P:Inertia.ORM.Table.Database"/> attached
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.#ctor">
            <summary>
            Instantiate a new instance
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.Create">
            <summary>
            Create the current <see cref="T:Inertia.ORM.Table"/> in the attached <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.CreateAsync(BasicAction{System.Boolean})">
            <summary>
            Create the current <see cref="T:Inertia.ORM.Table"/> instance asynchronously in the attached <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.Delete">
            <summary>
            Delete the current <see cref="T:Inertia.ORM.Table"/> instance in the attached <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.DeleteAsync(BasicAction{System.Boolean})">
            <summary>
            Delete the current <see cref="T:Inertia.ORM.Table"/> instance asynchronously in the attached <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.Insert">
            <summary>
            Insert a new record of type <see cref="T:Inertia.ORM.Table"/> in the <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.Insert(System.Int64@)">
            <summary>
            Insert a new record of type <see cref="T:Inertia.ORM.Table"/> in the <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.Table.InsertAsync(BasicAction{System.Boolean})">
            <summary>
            Insert a new record of type <see cref="T:Inertia.ORM.Table"/> asynchronously in the <see cref="T:Inertia.ORM.Database"/>
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Inertia.ORM.ConditionOperator">
            <summary>
            Conditonal operators
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.Equal">
            <summary>
            "=" operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.Greater">
            <summary>
            greater operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.Less">
            <summary>
            less operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.GreaterOrEqual">
            <summary>
            greater or equal operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.LessOrEqual">
            <summary>
            less or equal operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.NotEqual">
            <summary>
            not equal operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.NotGreater">
            <summary>
            not greater operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.NotLess">
            <summary>
            not less operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.In">
            <summary>
            "IN" operator
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionOperator.Like">
            <summary>
            "LIKE" operator
            </summary>
        </member>
        <member name="T:Inertia.ORM.ConditionType">
            <summary>
            Conditional type (AND, OR)
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionType.And">
            <summary>
            "AND" condition
            </summary>
        </member>
        <member name="F:Inertia.ORM.ConditionType.Or">
            <summary>
            "OR condition"
            </summary>
        </member>
        <member name="T:Inertia.ORM.InvalidDatabaseAttachException">
            <summary>
            Throw when a <see cref="T:Inertia.ORM.DatabaseAttach"/> attribute has a not existing Database
            </summary>
        </member>
        <member name="P:Inertia.ORM.InvalidDatabaseAttachException.Message">
            <summary>
            Message of the exception
            </summary>
        </member>
        <member name="F:Inertia.ORM.InvalidDatabaseAttachException.DatabaseType">
            <summary>
            Database name to attach
            </summary>
        </member>
        <member name="M:Inertia.ORM.InvalidDatabaseAttachException.#ctor(System.Type)">
            <summary>
            Instantiate a new instance of the class <see cref="T:Inertia.ORM.InvalidDatabaseAttachException"/>
            </summary>
            <param name="databaseType">Type of the database to attach</param>
        </member>
        <member name="T:Inertia.ORM.DatabaseConnectionFailedException">
            <summary>
            Throw when failed to connect to a <see cref="P:Inertia.ORM.DatabaseConnectionFailedException.Database"/>
            </summary>
        </member>
        <member name="P:Inertia.ORM.DatabaseConnectionFailedException.Message">
            <summary>
            Message of the exception
            </summary>
        </member>
        <member name="P:Inertia.ORM.DatabaseConnectionFailedException.Database">
            <summary>
            Database that throwed the exception
            </summary>
        </member>
        <member name="M:Inertia.ORM.DatabaseConnectionFailedException.#ctor(Inertia.ORM.Database)">
            <summary>
            Instantiante a new instance of the class <see cref="T:Inertia.ORM.DatabaseConnectionFailedException"/>
            </summary>
            <param name="database"></param>
        </member>
        <member name="T:Inertia.ORM.NoFieldsException">
            <summary>
            Throw when a <see cref="T:Inertia.ORM.Table"/> class don't have any fields
            </summary>
        </member>
        <member name="P:Inertia.ORM.NoFieldsException.Message">
            <summary>
            Message of the exception
            </summary>
        </member>
        <member name="M:Inertia.ORM.NoFieldsException.#ctor(Inertia.ORM.Table)">
            <summary>
            Instantiante a new instance of the class <see cref="T:Inertia.ORM.NoFieldsException"/>
            </summary>
            <param name="table"></param>
        </member>
        <member name="T:Inertia.ORM.SqlManager">
            <summary>
            Main class for ORM access
            </summary>
        </member>
        <member name="M:Inertia.ORM.SqlManager.ManualTablesGeneration">
            <summary>
            Generate all <see cref="T:Inertia.ORM.Table"/> in <see cref="T:Inertia.ORM.Database"/>
            </summary>
        </member>
        <member name="M:Inertia.ORM.SqlManager.GetDatabase(System.String)">
            <summary>
            Get a <see cref="T:Inertia.ORM.Database"/> instance based on the name
            </summary>
            <param name="name">Name of the <see cref="T:Inertia.ORM.Database"/></param>
            <returns>Finded instance or null</returns>
        </member>
        <member name="M:Inertia.ORM.SqlManager.GetDatabase``1">
            <summary>
            Get a <see cref="T:Inertia.ORM.Database"/> instance based on the <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the target <see cref="T:Inertia.ORM.Database"/></typeparam>
            <returns><typeparamref name="T"/> instance or null</returns>
        </member>
        <member name="M:Inertia.ORM.SqlManager.GetDatabase(System.Type)">
            <summary>
            Get a <see cref="T:Inertia.ORM.Database"/> instance based on the <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the target <see cref="T:Inertia.ORM.Database"/></typeparam>
            <returns><typeparamref name="T"/> instance or null</returns>
        </member>
        <member name="M:Inertia.ORM.SqlManager.GetTable``1">
            <summary>
            Get a <see cref="T:Inertia.ORM.Table"/> instance based on the <see cref="T:System.Type"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Inertia.ORM.SqlManager.UseDb``1(BasicAction{``0})">
            <summary>
            Get the specified <typeparamref name="T"/> instance and execute <paramref name="usage"/> action
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of <see cref="T:Inertia.ORM.Database"/> to get</typeparam>
            <param name="usage">Action to execute</param>
        </member>
        <member name="M:Inertia.ORM.SqlManager.UseTable``1(BasicAction{``0})">
            <summary>
            Get the specified <typeparamref name="T"/> instance and execute usage action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="usage"></param>
        </member>
    </members>
</doc>
